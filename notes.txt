//github.com/zsoltkiss/Java_Basics
//Modified from DBSYS
//Modified with GitHub DeskTop

OOP:
- Abstraction
- Inheritance
- Polymorphism
- Encapsulation
("A PIE")

class MyClass{
    [...adattagok...]

    //Constructor, ha nem a default:
    public MyClass(){

    }

    //Nem példányosítható class esetén:
    private MyClass(){

    }
    //Pl.: MyClass.getInstance(); - ez adhat vissza egy példányt, a private MyClass hívásával.
    //Ebben esetben static metódusokat lehet hívni.

    finalize() - Az elárvult példány megszüntetése előtt fut le. Erőforrások felszabadítását végezheti el pl.
        Korrekt módon megírt class esetén nincs rá szükség.
}

Access modifiers:
- private   : classon belüli elérhetőség.
- public    : teljes elérhetőség.
- protected : a leszármazottjai érhetik el, csomagtól függetlenül; valamint csomagon belül elérhető.
- (default) : package-en belüli elérhetőség.

Java Bean névkonvenció:
CamelCase getterek és setterek. A get/set után a változónevek is nagybetűvel kezdődnek.
Boolean változó gettere nem "get" hanem "is" kezdetű.
A setter és a getter egyfeladatú; mást NE tegyél bele, mint ami belevaló.
A side effect kerülendő. Vagy inkább tilos.
Az értékvalidáció nem side effect. ("guard effect")

Deklarált típus: pl.: Lehet az ősosztály
Futásidejű típus: A deklarált típusú változó leszármazott típusú értéket kap.
Futásidejű típus metódusai csak castolással hívhatók meg.

Final Class: Nem leszármaztatható osztály.
Abstract class: Nem példányosítható osztály. Lehetnek, sőt jellemzően vannak abstract metódusai is.
Az abstract metódusnak nincs blokkja!
Az abstract class leszármazottjának vagy implementálnia kell az abstract metódust, vagy szintén deklarálnia kell
abstractként.

Interface:
- névkonvenció: "...able {}", esetleg "I... {}"
- abstract metódus, de nem utasításokat tarttalmaz, hanem csakis szignatúrákat; természetesen csakis publikusakat.
- pl: Class Circle extends Shape implements Drawable, Colorable, Runable { ... }
- Külön .java állományokban helyezzük el őket. Nem classon belüli rész.
- Interface lehet üres is: Marker interface. Azonos alakúságot biztosítanak vele.
- Az interface mögött cserélhető az implementáció! Pl:

IS-A : Circle is-a Shape: Class Circle extends Shape;
HAS-A: Composition: Circle has-a Color: Van Color adattagja;

Scope: "fókusz"; láthatósági kör.
Scenario: "(színházi) szín"; adott eseménysorozat.

Design Pattern = tervezési minta: Jól bevált programozási módszer. PL:
- Singleton
- factory
- decorator
- observer

Collections
-----------
- primitív adattípusokat nem lehet beletenni. Illetve de, csak mégsem: AutoBoxing és AutoUnboxing;
- Az elemek konkrét típusa bármi lehet, különböző is; mivel mind Object;
- Három fő típusuk van:
    - listák:
        (ordered list / managed list)
    - setek (halmazok): Csak duplikálatlan elemek lehetnek benne. Típus is számít! (nem "==" hanem "===" szerint)
    - map-ek (kulcs-érték párok)
- Az interface mögött cserélhető az implementáció! Pl:
        List myNumbers = new ArrayList(); //ArrayList implements List;
        List myNumbers = new LinkedList();//LinkedList implements List;
        Set myPersons = new HashSet();   //
        Map myConfigs = new HashMap();    //A kulcsoknak egyedieknek kell lennie. A konkrét típusuk lehet más, mivel mind Object.
            //De erre is van lehetőség, pl: Map<String,Integer>

- Saját objektumainkban szükséges, ha kollekciókban akarjuk használni:
    - toString() //Csak ajánlott
    - equals( Object o)
    - int hashCode()
    A java.lang.Comparable interface-ből:
    - compareTo( Object o)  ;
        result:
            0: egyenlőek; vagy a típus nem ugyanaz.
            1: this > other
            -1: this < other

- "Gang of Four":Design Patterns c. könyv (tervezési minták, nyelvfüggetlen módon)
- "Pattern favor":"Minta-láz" : Patternek túlzott használata.

Rekurzió:
- Rekurzív metódusnak legyen menekülőútja.

Listán használható az index szerinti elérés, pl:
- Object o = list.get( i ); //list : ArrayList;
- Object o = map.get( key );//map: HashMap;
Ciklikus elérés:
- for( Object o: myList ){}
- for( int i = 0; i < myList.size(); i++ ){  ... myList.get(i) ... }
- ITERATOR design pattern:
    - boolean hasNext()
    - Object next()
    - pl:
        Iterator it = myList.iterator();
        while( it.hasNext() ){
            Object o = next();
        }
    - pl:
        for( Iterator it = myList.iterator(); it.hasNext; ){
            Object o = it.next();
        }

Enum típus:
- abstract osztályból származik
- Pl:
    enum HetNapjai{ HETFO, KEDD, ... , VASARNAP ; }
    ...
    HetNapjai toDay = HetNapjai.SZERDA;

    enum HetNapjai{
        HETFO(true), KEDD(true), ... , VASARNAP(fals) ;

        private boolean munkanap;

        //Konstruktor - enum esetében mindig private
        Hetnapjai( boolean b ){
            munkanap = b;
        }
        public String toString){
            ...
        }
    }

- values() [tömbben visszaadja az enum elemeit], name(), ordinal()

TERVEZÉSI MINTÁK (Design Patterns)
----------------------------------
Wiki: "GoF alapelvek"
Irodalom:
    - GoF: Design Patterns (C,C++; 1999)
    - Head First: Design Patterns  (A Brain-Friendly Guide) (Java)

Alapelvek (egy pár):
- Laza csatolás az objektumok között
- Interface-ek használata
- Class, method ne legyen túl nagy
- Az osztály legyen bővítésre nyitott, módosításra zárt.
- "Csak a barátaiddal beszélgess!" (Pl.: Library.)
- "Hollywood principle: don't call us, we will call you." (Pl.: Observer Pattern: Observer vs. Observable classes.)


Ellenpéldák:
- AntiPattern
- God Object

Típusai (pl.):
--------------
- Singleton: Ld. feljebb.
- Decorator:
    abstract class Drink ...
    class Coffee extends Drink ...
        private Drink decor

    class Milk extends Drink ...
        private Drink decor

    class Whip extends Drink ...
        private Drink decor

    //Eggy eszpresszó, dupla tejjel és tejszínhabbal!
    Drink Coffee = new Whip( new Milk( new Milk( new Espresso() ) ) );

    - Hagymahéj-szerű felépítés
    - pipeline-szerű feldolgozási sor, a "magból" "kifelé"
    - Pl.: java.io
        FileInputStream "feldekorálása" intelligensebb értelmezőkkel.

- Chain of Responsibility ("Illetékességi sor"):
    abstract class Handler ...
        private Handler nextHandler ...
        abstract void handle( ) ...
            Pl.: ... if( ... instanceOf ... ) ...

KIVÉTELKEZELÉS:
---------------
- ősosztály: java.lang.Throwable
    -> Exception
        - Checked : try-catch -el kezelhető.
        - UnChecked : Crash/Abort
    -> RuntimeException
        - nem kell try-catch kezelésbe tenni, mert nem ellenőrzött kivétel.
    -> Error
- try{} catch() {} finally { ... ez mindenképpen lefut, akkor is, ha nem volt hiba a try blokkban ... }
    ... throw new UnsupportedOperationException("majd megírom"); ...
    Exception.printStackTrace();

GENERICS:
---------
pld:
    List numbers = Arrays.asList( 1,3,5,7,9 );
    for( Object o:numbers ){
        Integer iObj = (Integer)o;
    }

    Ehelyett:

    List<Integer> numbers = Arrays.asList( ... );
    for( Integer i: numbers ){
        ...
    }

    "<...>" : TÍPUSPARAMÉTER

    List<Integer> numbers = new ArrayList<Integer>();
    List<Integer> numbers = new ArrayList<>();
    List<Integer> numbers = new ArrayList();

    Implicit típusparaméter az "<Object>". ;)

    Map-ek esetében:
        Map<Integer,Double> map = new HashMap<>;

        map.put( i, d );
        map.get( ... ); => a kulcsot a get() nem ellenőriz generics-re. Helytelen típus esetén NULL-t ad vissza.

További haszon:
    class Node<T[,...]>{

        public Node(Object o, T next){

        }

        public T calculate(){}

    }
    //A "T" tetszőleges, sőt, ismeretlen class, de mindig ugyanaz a hivatkozó classon belül!

    main(){
        Node<String> n1 = new Node( new Object(), "Valami" );
        Node<Integer> n2 = new Node( new Object(), 1 );

    }

    class< T extends Valami > ...
    //Valami lehet class vagy interface is

DÁTUMOK:
--------
JAVA 8 előtt:
("@Deprecated" - elavult, kivezetés alatt.)
- java.util.Date
    A dátumot egy long érték, a unix timestamp reprezentálja, 1970.01.01 00:00:00.001-tól kezdve.
    PL:
        Date now = new Date();
        now.getTime();
        sout(now);

- java.util.Calendar
    - abstract osztály. Egyik leszármazottja a GregorianCalendar.
    - Calendar cal = Calendar.getIstance() : A gép op.rendszere szerinti kalendáriumot adja vissza.
    - cal.getTime(); => Date
    - cal.getTimeInMillis(); => Long

JAVA 8 óta:
- Date and Time API

- java.text:
    DateFormat abstract class => SimpleDateFormat;
    - format()
    - parse()

"i18n" - internationalisation   = "nemzetköziestítés"
"l10n" - localisation           = "lokálissá tétel"

ZH konzekvenciák:
-----------------
- Az Interface nem abstract class, hanem nyelvi konstrukció.
- Primitív adattípusok: int, byte, short, boolean, double, char + long, float
- Hozzáférés-módosítók: public, private, protected + [default:"package private"]
- constructor: osztályt példányosító metódus.
- 3 fő collection framework: List, Set, Map - ezek Interface-ek!

Interface extendálhat de NEM implementálhat másik Interface-t!

SZERIALIZÁCIÓ:
--------------
java.lang.Serializable - MARKER interface
"flatten" - "laposítás": byte tömb készítése az objektumból.
Az objektum pillanatnyi állapotának "lefagyasztása", általában kimentés, és későbbi visszatöltés, azaz DESZERIALIZÁCIÓ
   céljából.

RMI - Remote Method Invocation
RMI-IIOP: A Corba JAVA-s megfelelője.

Serializable példány csak akkor szerializálható, ha minden adattagja is szintén serializable.

I/O:
----
java.io
- nagy része Decorator Pattern szerinti felépítésű.
- ObjectOutputStream.writeObject() : Szerializál.  => void
- ObjectInputStream.readObject()  : Deszerializál. => Object

...
FileOutputStream fs = new FileOutputStream("mentettpeldaany.ser");
ObjectOutputStream oos = new ObjectOutputStream( fs );
oos.writeObject( person );
oos.close();
...

long SerialVersionUID - minden oszztályban benne lévő property. Teszteléshez érdemes "befagyasztani", azaz a kódban megadni.
    (private static final long SerialVersionUID = ...;)
    Settings: Editor > Inspections > JAVA > Serialization Issues > Serializable class without... - bepipálni.

transient property: kiveszi a property-t a szerializációból.

--------------------------------------

...Reader - ...Writer
...InputStream - ...OutputStream

"File" - csak elérési utat reprezentál.





